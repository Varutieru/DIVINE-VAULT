// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// model Item {
//   id Int @id @default(autoincrement())
//   item_name String @unique
//   price Float
//   description String?
//   productVariations ProductVariation[]
// }

// model Size {
//   id Int @id @default(autoincrement())
//   size_name String @unique
//   productVariations ProductVariation[]
// }

// model ProductVariation {
//   variation_id Int @id @default(autoincrement())
//   item_id Int
//   variation_name String @unique
//   size_id Int
//   stock Int
//   item        Item        @relation(fields: [item_id], references: [id])
//   size        Size        @relation(fields: [size_id], references: [id])

//   @@unique([item_id, size_id]) // Memastikan kombinasi item dan size unik untuk setiap variasi
// }







// Model untuk Produk Utama
// Contoh: "Authentic Workshirt" secara umum.
model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  variants    ProductVariant[] // Satu produk bisa punya banyak varian (ukuran)
}

// Model untuk Varian Produk
// Contoh: "Archangel" ukuran "S" dengan harga Rp389.000.
// Inilah yang sebenarnya ditambahkan ke keranjang.
model ProductVariant {
  id        String    @id @default(cuid())
  size      String?   // misal: "S", "M", "L"
  price     Decimal   // Gunakan Decimal untuk presisi harga
  stock     Int
  
  productId String
  product   Product   @relation(fields: [productId], references: [id])

  cartItems CartItem[] // Varian ini bisa ada di banyak item keranjang
}

// Model untuk Keranjang Belanja (GLOBAL)
// Tidak lagi terikat pada User. Aplikasi ini hanya akan memiliki SATU keranjang.
model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  items     CartItem[] // Ini adalah daftar barang di dalam keranjang
}

// Model untuk Item di dalam Keranjang
// Menghubungkan Cart dengan ProductVariant. Strukturnya tetap sama.
model CartItem {
  id        String @id @default(cuid())
  quantity  Int    @default(1)
  
  // Relasi ke Cart
  cartId    String
  cart      Cart   @relation(fields: [cartId], references: [id])
  
  // Relasi ke ProductVariant
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])

  // Memastikan satu varian produk tidak muncul dua kali sebagai baris terpisah di keranjang yang sama.
  @@unique([cartId, variantId])
}